AWSTemplateFormatVersion: 2010-09-09

Description: |
  This Cloudformation Template creates a Kubernetes Cluster on Ubuntu 22.04 of EC2 Instances.
  Kubernetes cluster comprises of one master node and one worker node.
  Once the Master node is up and running, Worker node automatically joins the Cluster.
  Managers security group allows all protocols from all ports within itself and from the Workers.
  Workers security group allows all protocols from all ports within itself and from the Managers.
  Both Security groups allows SSH (22) connections from anywhere.
  User needs to select appropriate key name when launching the template.
  This template is designed for us-east-1 (N. Virginia) region. If you work on another region, do not forget to change instances imageId

Parameters:
  KeyPairName:
    Description: Enter the name of your Key Pair for SSH connections.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be one of the existing EC2 KeyPair

Resources:
  InstanceConnectPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument: #required
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ec2-instance-connect:SendSSHPublicKey
            Resource:
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
            Condition: {"StringEquals": {"ec2:osuser": "ubuntu"}}
          - Effect: Allow
            Action:
              - ec2:DescribeInstances
            Resource: "*"
  
  EC2InstanceConnect:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref InstanceConnectPolicy
  EC2ConnectProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles: #required
        - !Ref EC2InstanceConnect
  ManagersSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH for Kube Masters
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 30000
          ToPort: 32767
          CidrIp: 0.0.0.0/0        
  WorkersSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH for Kube Workers
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 30000
          ToPort: 32767
          CidrIp: 0.0.0.0/0  
  ManagersSGIngress1:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !GetAtt ManagersSecurityGroup.GroupId
      IpProtocol: -1 #required
      SourceSecurityGroupId: !GetAtt ManagersSecurityGroup.GroupId
  ManagersSGIngress2:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !GetAtt ManagersSecurityGroup.GroupId
      IpProtocol: -1 #required
      SourceSecurityGroupId: !GetAtt WorkersSecurityGroup.GroupId
  WorkersSGIngress1:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !GetAtt WorkersSecurityGroup.GroupId
      IpProtocol: -1 #required
      SourceSecurityGroupId: !GetAtt WorkersSecurityGroup.GroupId
  WorkersSGIngress2:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !GetAtt WorkersSecurityGroup.GroupId
      IpProtocol: -1 #required
      SourceSecurityGroupId: !GetAtt ManagersSecurityGroup.GroupId

  KubeMaster1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0557a15b87f6559cf
      InstanceType: t3a.medium
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref EC2ConnectProfile
      SecurityGroupIds:
        - !GetAtt ManagersSecurityGroup.GroupId
      Tags:                
        -                        
          Key: Name
          Value: !Sub Kube Master 1st on Ubuntu 22.04 of ${AWS::StackName}
      UserData: 
        Fn::Base64: 
          !Sub |
            #! /bin/bash
            apt-get update -y
            apt-get upgrade -y
            hostnamectl set-hostname kube-master
            apt-get install -y apt-transport-https ca-certificates curl
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
            echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
            apt-get update
            apt-get install -y kubelet=1.28.1-00 kubeadm=1.28.1-00 kubectl=1.28.1-00 kubernetes-cni docker.io
            apt-mark hold kubelet kubeadm kubectl
            systemctl start docker
            systemctl enable docker
            usermod -aG docker ubuntu
            newgrp docker
            cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
            net.bridge.bridge-nf-call-iptables  = 1
            net.bridge.bridge-nf-call-ip6tables = 1
            net.ipv4.ip_forward                 = 1
            EOF
            sysctl --system
            mkdir /etc/containerd
            containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
            sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
            systemctl restart containerd
            systemctl enable containerd
            kubeadm config images pull
            kubeadm init --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=All
            mkdir -p /home/ubuntu/.kube
            cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
            chown ubuntu:ubuntu /home/ubuntu/.kube/config
            su - ubuntu -c 'kubectl apply -f https://github.com/coreos/flannel/raw/master/Documentation/kube-flannel.yml'

  KubeWorker1:
    Type: AWS::EC2::Instance
    DependsOn:
      - KubeMaster1
    Properties:
      ImageId: ami-0557a15b87f6559cf
      InstanceType: t3a.medium
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref EC2ConnectProfile
      SecurityGroupIds:
        - !GetAtt WorkersSecurityGroup.GroupId
      Tags:                
        -                        
          Key: Name
          Value: !Sub Kube Worker 1st on Ubuntu 22.04 of ${AWS::StackName}
      UserData: 
        Fn::Base64: 
          !Sub |
            #! /bin/bash
            apt-get update -y
            apt-get upgrade -y
            hostnamectl set-hostname kube-worker
            apt-get install -y apt-transport-https ca-certificates curl
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
            echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
            apt-get update
            apt-get install -y kubelet=1.28.1-00 kubeadm=1.28.1-00 kubectl=1.28.1-00 kubernetes-cni docker.io
            apt-mark hold kubelet kubeadm kubectl
            systemctl start docker
            systemctl enable docker
            usermod -aG docker ubuntu
            newgrp docker
            cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
            net.bridge.bridge-nf-call-iptables  = 1
            net.bridge.bridge-nf-call-ip6tables = 1
            net.ipv4.ip_forward                 = 1
            EOF
            sysctl --system
            mkdir /etc/containerd
            containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
            sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
            systemctl restart containerd
            systemctl enable containerd
            wget https://bootstrap.pypa.io/get-pip.py
            python3 get-pip.py
            pip install pyopenssl --upgrade
            pip3 install ec2instanceconnectcli
            apt install -y mssh
            until [[ $(mssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -t ${KubeMaster1} -r ${AWS::Region} ubuntu@${KubeMaster1} kubectl get no | awk 'NR == 2 {print $2}') == Ready ]]; do echo "master node is not ready"; sleep 3; done;
            kubeadm join ${KubeMaster1.PrivateIp}:6443 --token $(mssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -t ${KubeMaster1} -r ${AWS::Region} ubuntu@${KubeMaster1} kubeadm token list | awk 'NR == 2 {print $1}') --discovery-token-ca-cert-hash sha256:$(mssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -t ${KubeMaster1} -r ${AWS::Region} ubuntu@${KubeMaster1} openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //') --ignore-preflight-errors=All

Outputs:
  1stKubeMasterPublicDNSName:
    Description: Kube Master 1st Public DNS Name
    Value: !Sub 
      - ${PublicAddress}
      - PublicAddress: !GetAtt KubeMaster1.PublicDnsName
  1stKubeMasterPrivateDNSName:
    Description: Kube Master 1st Private DNS Name
    Value: !Sub 
      - ${PrivateAddress}
      - PrivateAddress: !GetAtt KubeMaster1.PrivateDnsName
  1stKubeWorkerPublicDNSName:
    Description: Kube Worker 1st Public DNS Name
    Value: !Sub 
      - ${PublicAddress}
      - PublicAddress: !GetAtt KubeWorker1.PublicDnsName
  1stKubeWorkerPrivateDNSName:
    Description: Kube Worker 1st Private DNS Name
    Value: !Sub 
      - ${PrivateAddress}
      - PrivateAddress: !GetAtt KubeWorker1.PrivateDnsName